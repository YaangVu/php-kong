<?php
/**
 * @Author yaangvu
 * @Date   May 20, 2022
 */

namespace Yaangvu\LaravelKong\Clients;

use Exception;
use JetBrains\PhpStorm\ArrayShape;
use Yaangvu\LaravelKong\Models\Target;
use Yaangvu\LaravelKong\Models\Upstream;

class TargetClient extends KongClient
{
    protected string   $model = Target::class;
    protected Upstream $upstream;

    /**
     * @inheritDoc
     *
     * @return Target[]
     */
    public function index(array $params = []): array
    {
        $upstreamId = $params['upstreamId'];
        $this->path = "/upstreams/$upstreamId" . $this->path;

        return parent::index($params); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     *
     * @return Target
     */
    public function show(string $id): Target
    {
        return parent::show($id); // TODO: Change the autogenerated stub
    }

    /**
     * @Description Handle Target data before insert or update
     *
     * @Author      yaangvu
     * @Date        May 20, 2022
     *
     * @param Target $kongEntity
     *
     * @return array
     */
    #[ArrayShape(['upstream' => "\Yaangvu\LaravelKong\Models\Upstream", 'target' => "string", 'weight' => "int", 'tags' => "array|null"])]
    public function _handleData($kongEntity): array
    {
        $upstreamId = $kongEntity->getUpstream()->getId() ?? $kongEntity->getUpstream()->getName();
        $this->path = "/upstreams/$upstreamId/targets";

        return [
            // 'upstream' => $data->getUpstream(),
            'target' => $kongEntity->getTarget(),
            'weight' => $kongEntity->getWeight(),
            'tags'   => $kongEntity->getTags()
        ];
    }

    /**
     * @inheritDoc
     *
     * @param Target $kongEntity
     *
     * @return Target
     */
    public function updateOrCreate($kongEntity): Target
    {
        try {
            return $this->update($kongEntity->getId() ?? $kongEntity->getTarget(), $kongEntity);
        } catch (Exception) {
            return $this->store($kongEntity);
        }
    }

    /**
     * @inheritDoc
     *
     * @param Target $kongEntity
     *
     * @return Target
     */
    public function update(string $id, $kongEntity): Target
    {
        return parent::update($id, $kongEntity); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     *
     * @param Target $kongEntity
     *
     * @return Target
     */
    public function store($kongEntity): Target
    {
        return parent::store($kongEntity); // TODO: Change the autogenerated stub
    }
}