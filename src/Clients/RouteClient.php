<?php
/**
 * @Author yaangvu
 * @Date   May 20, 2022
 */

namespace Yaangvu\LaravelKong\Clients;

use Yaangvu\LaravelKong\Models\KongEntity;
use Yaangvu\LaravelKong\Models\Route;
use Yaangvu\LaravelKong\Models\Service;

class RouteClient extends KongClient
{
    protected string  $model = Route::class;
    protected Service $service;

    /**
     * @inheritDoc
     *
     * @return Route[]
     */
    public function index(array $params = []): array
    {
        return parent::index($params); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     *
     * @param Route $kongEntity
     *
     * @return Route
     */
    public function store($kongEntity): Route
    {
        return parent::store($kongEntity); // TODO: Change the autogenerated stub
    }

    /**
     * @Description Handle Upstream data before insert or update
     *
     * @Author      yaangvu
     * @Date        May 20, 2022
     *
     * @param Route $kongEntity
     *
     * @return array
     */
    public function _handleData($kongEntity): array
    {
        $serviceId  = $kongEntity->getService()->getId() ?? $kongEntity->getService()->getName();
        $this->path = "/services/$serviceId/routes";

        return [
            'name'                       => $kongEntity->getName(),
            'hosts'                      => $kongEntity->getHosts(),
            'protocols'                  => $kongEntity->getProtocols(),
            'methods'                    => $kongEntity->getMethods(),
            'paths'                      => $kongEntity->getPaths(),
            'headers'                    => $kongEntity->getHeaders(),
            'path_handling'              => $kongEntity->getPathHandling(),
            'strip_path'                 => $kongEntity->getStripPath(),
            'preserve_host'              => $kongEntity->getPreserveHost(),
            'https_redirect_status_code' => $kongEntity->getHttpsRedirectStatusCode(),
            'regex_priority'             => $kongEntity->getRegexPriority(),
            'snis'                       => $kongEntity->getSnis(),
            'sources'                    => $kongEntity->getSources(),
            'destinations'               => $kongEntity->getDestinations(),
            'service'                    => $kongEntity->getService(),
            'tags'                       => $kongEntity->getTags(),
        ];
    }

    /**
     * @inheritDoc
     *
     * @return Route
     */
    public function update(string $id, $kongEntity): Route
    {
        return parent::update($id, $kongEntity); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     *
     * @return Route
     */
    public function updateOrCreate(KongEntity $kongEntity): mixed
    {
        return parent::updateOrCreate($kongEntity); // TODO: Change the autogenerated stub
    }
}