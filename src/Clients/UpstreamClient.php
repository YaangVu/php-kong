<?php
/**
 * @Author yaangvu
 * @Date   May 20, 2022
 */

namespace Yaangvu\LaravelKong\Clients;

use Carbon\Carbon;
use JetBrains\PhpStorm\ArrayShape;
use Yaangvu\LaravelKong\Models\Upstream;

class UpstreamClient extends KongClient
{
    protected string $path  = '/upstreams';
    protected string $model = Upstream::class;

    /**
     * @inheritDoc
     *
     * @return Upstream[]
     */
    public function index(array $params = []): array
    {
        return parent::index($params); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     *
     * @return Upstream
     */
    public function show(string $id): Upstream
    {
        return parent::show($id);
    }

    /**
     * @inheritDoc
     *
     * @param Upstream $kongEntity
     *
     * @return Upstream
     */
    public function store($kongEntity): Upstream
    {
        return parent::store($kongEntity);
    }

    /**
     * @Description Handle Upstream data before insert or update
     *
     * @Author      yaangvu
     * @Date        May 20, 2022
     *
     * @param Upstream $kongEntity
     *
     * @return array
     */
    public function _handleData($kongEntity): array
    {
        return [
            'created_at'           => $kongEntity->getCreatedAt() ?? Carbon::now()->timestamp,
            'hash_on'              => $kongEntity->getHashOn(),
            'algorithm'            => $kongEntity->getAlgorithm(),
            'name'                 => $kongEntity->getName(),
            'tags'                 => $kongEntity->getTags(),
            'hash_fallback_header' => $kongEntity->getHashFallbackHeader(),
            'hash_fallback'        => $kongEntity->getHashFallback(),
            'hash_on_cookie'       => $kongEntity->getHashOnCookie(),
            'host_header'          => $kongEntity->getHostHeader(),
            'hash_on_cookie_path'  => $kongEntity->getHashOnCookiePath(),
            'healthchecks'         => $kongEntity->getHealthChecks() ?? $this->_setDefaultHealthChecks(),
            'hash_on_header'       => $kongEntity->getHashOnHeader(),
            'slots'                => $kongEntity->getSlots()
        ];
    }

    #[ArrayShape(["threshold" => "int", "active" => "array", "passive" => "array"])]
    private function _setDefaultHealthChecks(): array
    {
        return [
            "threshold" => 0,
            "active"    => [
                "unhealthy" => [
                    "http_statuses" => [
                        429,
                        404,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505
                    ],
                    "tcp_failures"  => 0,
                    "timeouts"      => 0,
                    "http_failures" => 0,
                    "interval"      => 0
                ],
                "type"      => "http",
                "http_path" => "/",
                "timeout"   => 1,
                "healthy"   => [
                    "successes"     => 0,
                    "interval"      => 0,
                    "http_statuses" => [
                        200,
                        302
                    ]
                ]
            ],
            "passive"   => [
                "unhealthy" => [
                    "http_failures" => 0,
                    "http_statuses" => [
                        429,
                        500,
                        503
                    ],
                    "tcp_failures"  => 0,
                    "timeouts"      => 0
                ],
                "healthy"   => [
                    "http_statuses" => [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        226,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308
                    ],
                    "successes"     => 0,
                ],
                "type"      => "http",
            ]
        ];
    }

    /**
     * @inheritDoc
     *
     * @param Upstream $kongEntity
     *
     * @return Upstream
     */
    public function update($id, $kongEntity): Upstream
    {
        return parent::update($id, $kongEntity);
    }

    /**
     * @inheritDoc
     *
     * @param Upstream $kongEntity
     *
     * @return Upstream
     */
    public function updateOrCreate($kongEntity): Upstream
    {
        return parent::updateOrCreate($kongEntity); // TODO: Change the autogenerated stub
    }
}